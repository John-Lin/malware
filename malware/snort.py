import logging

logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s', )


class SnortRuleBase(object):
    def __init__(self):
        # Rule Headers
        self.action = 'alert'
        self.protocol = 'tcp'
        self.src_ip = 'any'
        self.src_port = 'any'
        self.dst_ip = 'any'
        self.dst_port = 'any'

        # General Rule
        self.msg = None
        self.ref = None
        self.sid = None
        self.gid = None
        self.rev = None
        self.classtype = None
        self.priority = None
        self.metadata = None

        # Payload Dection Rule
        self.content = None
        self.uricontent = None
        self.depth = None
        self.offset = None
        self.nocase = None


class SnortRule(SnortRuleBase):
    def __init__(self):
        super(SnortRule, self).__init__()

    def __rule_header(self):
        '''Generate snort rule header.
        There are five information in the Rules Headers
        Rule Actions, Protocols, IP Addresses, Port Numbers,
        The Direction Operator'''
        header = [self.action, self.protocol, self.src_ip,
                  self.src_port, '->', self.dst_ip, self.dst_port]
        header = [str(i) for i in header]
        return ' '.join(header)

    def __rule_options(self):
        '''Generate rule options.
        There are four major categories of Rules Options.
        general, payload, non-payload, post-detection'''
        general = self.__rule_general()
        payload = self.__rule_payload()
        return "({general}; {payload};)".format(general=general,
                                                payload=payload)

    def __rule_general(self):
        '''Generate snort general rule options.
        There are eight keyword in general rule.
        msg, reference, gid, sid, rev, classtype, priority, metadata'''
        references = self.__slice_multiple('reference', self.ref)

        rest_general = ['msg:{message}'.format(message=self.msg),
                        'sid:{sid}'.format(sid=self.sid),
                        'gid:{gid}'.format(gid=self.gid),
                        'rev:{rev}'.format(rev=self.rev),
                        'classtype:{clstype}'.format(clstype=self.classtype),
                        'priority:{priority}'.format(priority=self.priority),
                        'metadata:{metadata}'.format(metadata=self.metadata)]
        general = rest_general + references
        general = self.__clean_none(general)
        return '; '.join(general)

    def __rule_payload(self):
        '''Generate snort payload detection rule options'''
        contents = self.__slice_multiple('content', self.content)
        rest_payload = ['uricontent:{uri}'.format(uri=self.uricontent),
                        '{nocase}'.format(nocase=self.nocase),
                        'depth:{depth}'.format(depth=self.depth),
                        'offset:{offset}'.format(offset=self.offset)]
        payload = contents + rest_payload
        payload = self.__clean_none(payload)
        return '; '.join(payload)

    def __rule_non_payload(self):
        '''Generate snort non-payload detection rule options'''
        pass

    def __clean_none(self, option_list):
        '''Clean the None in the list'''
        update = []
        for option in option_list:
            if "None" not in option:
                update.append(option)
        return update

    def __slice_multiple(self, tag, data):
        '''Slice the multiple item'''
        if data is None:
            return []
        else:
            assert isinstance(data, list)
            sliced = []
            for item in data:
                sliced.append('{tag}:{item}'.format(tag=tag, item=item))
            return sliced

    def generate(self):
        '''Generate complete snort rule'''
        header = self.__rule_header()
        options = self.__rule_options()
        return "{header}{options}".format(header=header, options=options)

    def set_malicious_pattern(self, **kwargs):
        '''Get snort rule rule header, options.'''
        # Rule Headers
        self.action = kwargs.get('action', 'alert')
        self.protocol = kwargs.get('protocol', 'tcp')
        self.src_ip = kwargs.get('src_ip', 'any')
        self.src_port = kwargs.get('src_port', 'any')
        self.dst_ip = kwargs.get('dst_ip', 'any')
        self.dst_port = kwargs.get('dst_port', 'any')

        # General Rule
        self.msg = kwargs.get('msg')
        self.ref = kwargs.get('reference')
        self.sid = kwargs.get('sid')
        self.gid = kwargs.get('gid')
        self.rev = kwargs.get('rev')
        self.classtype = kwargs.get('classtype')
        self.priority = kwargs.get('priority')
        self.metadata = kwargs.get('metadata')

        # Payload Dection Rule
        self.content = kwargs.get('content')
        self.uricontent = kwargs.get('uricontent')
        self.nocase = kwargs.get('nocase')
        self.offset = kwargs.get('offset')
        self.depth = kwargs.get('depth')


if __name__ == "__main__":

    pattern = {
        'dst_port': 21,
        'msg': '"Trojan.VB.Gen"',
        'content': ['"|2f 70 6b 69 2f 63 72 6c 2f 70 72 6f|"',
                    '"|2f 70 6b 69 2f 63 72 6c 2f 70 72 6f|"'],
        'uricontent': '"/DirectDownloaderInstaller.exe"',
        'reference': ['md5,c1920c396043d109af6d8315cc66ba44',
                      'email,rules@anti-botnet.edu.tw'],
        'sid': 1000001}

    rule = SnortRule()
    # rule.set_malicious_pattern(**pattern)
    rule.protocol = 'udp'
    rule.msg = '"Trojan.VB.Gen"'
    rule.dst_port = 21
    rule.content = ['"|2f 70 6b 69 2f 63 72 6c 2f 70 72 6f|"',
                    '"|2f 70 6b 69 2f 63 72 6c 2f 70 72 6f|"']
    rule.uricontent = '"/DirectDownloaderInstaller.exe"'
    rule.reference = ['md5,c1920c396043d109af6d8315cc66ba44']
    print rule.generate()
