import re
import time
import logging
from malware import utils
from malware.snort import SnortRule
from malware import pickle_tool
from malware import virustotal


logging.basicConfig(level=logging.DEBUG)
# format='[%(levelname)s] %(message)s', )
logger = logging.getLogger(__name__)


def host_search(content):
    return re.search('Host: (.*)', content)


def get_search(content):
    return re.search('GET (.*) HTTP', content)


def get_positive(resource, cache):
    if resource in cache.keys():
        positives = cache.get(resource)
        # logger.info('%s in cache positives: %s' % (resource, positives))
        return positives
    else:
        positives = virustotal.scan_url(resource)
        if positives >= 0:
            cache[resource] = positives
        return positives


def gen_rule():
    pass


def iscontent(rule, rule_set):
    contents = []
    for r in rule_set:
        contents.append(r.content)
    if rule.content in contents:
        # print 'rule in contents'
        return True
    else:
        return False


def main():
    logger.info('Local cache self update.')
    virustotal.update_local_cache()
    logger.info('Done')
    cache = pickle_tool.check_pickle()

    pattern = {'msg': '"Trojan.Gen"'}
    connection = utils.follow_tcp_stream('./3a.pcap')
    rule_set = []
    sid = 1000000
    for conn, frame in connection.iteritems():
        dst_port = conn[3]
        # print utils.connection_key_2_str(conn)
        for seq, content in frame.iteritems():
            if content and get_search(content):
                s = get_search(content)
                # print s.group(0), s.group(1)
            if content and host_search(content):
                searchobj = host_search(content)
                resource = searchobj.group(1)[0:-1]
                # print resource
                c = searchobj.group(0)[0:-1]
                positives = get_positive(resource, cache)
                if positives > 0:
                    sid += 1
                    pattern['content'] = ['"{host}"'.format(host=c), 'nocase']
                    pattern['sid'] = sid
                    pattern['dst_port'] = dst_port
                    rule = SnortRule()
                    rule.set_malicious_pattern(**pattern)
                    if not iscontent(rule, rule_set):
                        rule_set.append(rule)
                    else:
                        sid -= 1
                elif positives == 0:
                    pass
                    # logger.info("%s NOT a malicious site" % resource)
                else:
                    logging.info("Scan Faild. wait 60 secconds")
                    logging.info("%s unrecording" % resource)
                    time.sleep(60)

    pickle_tool.update_pickle(cache)
    for i in rule_set:
        print i


if __name__ == "__main__":
    main()
