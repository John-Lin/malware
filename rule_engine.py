import re
import os
import time
import logging
from malware import utils
from malware.snort import SnortRule
from malware import pickle_tool
from malware import virustotal


# format='[%(levelname)s] %(message)s', )
logger = logging.getLogger(__name__)
RULE = list()


def list_pcap():
    for dirPath, dirNames, fileNames in os.walk("./PCAPLog/"):
        for f in fileNames:
            if f.split('.')[1] == 'pcap':
                yield os.path.join(dirPath, f)


def host_search(content):
    return re.search('Host: (.*)', content)


def get_search(content):
    return re.search('GET (.*) HTTP', content)


def get_positive(resource, cache={}):
    if resource in cache.keys():
        print "%s in cache." % resource
        positives = cache.get(resource)
        # logger.info('%s in cache positives: %s' % (resource, positives))
        return positives
    else:
        print "Search on VirusTotal"
        positives = virustotal.url_report(resource)
        if positives >= 0:
            cache[resource] = positives
        return positives


def iscontent(rule, rule_set):
    contents = []
    for r in rule_set:
        contents.append(r.content)
    if rule.content in contents:
        # print 'rule in contents'
        return True
    else:
        return False


def isuricontent(rule, rule_set):
    uricontents = []
    for r in rule_set:
        uricontents.append(r.uricontent)
    if rule.uricontent in uricontents:
        # print 'rule in contents'
        return True
    else:
        return False


def iterpayload(path):
    connection = utils.follow_tcp_stream(path)
    for conn, frame in connection.iteritems():
        for seq, content in frame.iteritems():
            if content:
                yield content, conn
            else:
                pass


def gen_rule(pcap_path):
    cache = pickle_tool.check_pickle()
    # rule_set = list()
    sid = 1000000
    for content, conn in iterpayload('%s' % (pcap_path)):
        # print content, utils.connection_key_2_str(conn)
        rest_get = get_search(content)
        host = host_search(content)
        if host:
            # pos = virustotal.url_report(host.group(1).rstrip())
            pos = get_positive(host.group(1).rstrip(), cache)
            # print host.group(1).rstrip()
            if pos > 0:
                sid += 1
                rule = make_host_rule(host.group(0).rstrip(), conn[3], sid)
                if not iscontent(rule, RULE):
                    RULE.append(rule)
                else:
                    sid -= 1
            else:
                pass
                # print "NOT generate"
                # NOT generate rule

            uricontent = host.group(1).rstrip() + rest_get.group(1)
            pos = get_positive(uricontent, cache)
            if pos > 0:
                print "BAD URL: %s" % uricontent
                sid += 1
                rule = make_uri_rule(uricontent, conn[3], sid)
                if not isuricontent(rule, RULE):
                    RULE.append(rule)
                else:
                    sid -= 1
            else:
                pass

        else:
            # print "no URL"
            pass
            # print repr(content)
    # for r in rule_set:
    #     print r

    pickle_tool.update_pickle(cache)
    # return rule_set


def make_host_rule(content, dst_port, sid):
    rule = SnortRule()
    pattern = dict()
    pattern['msg'] = '"Trojan.Gen"'
    pattern['content'] = ['"{host}"'.format(host=content), 'nocase']
    pattern['sid'] = sid
    pattern['dst_port'] = dst_port
    rule.set_malicious_pattern(**pattern)
    return rule


def make_uri_rule(uricontent, dst_port, sid):
    rule = SnortRule()
    pattern = dict()
    pattern['msg'] = '"Trojan.Gen.uricontent"'
    pattern['uricontent'] = ['"{uri}"'.format(uri=uricontent), 'nocase']
    pattern['sid'] = sid
    pattern['dst_port'] = dst_port
    rule.set_malicious_pattern(**pattern)
    return rule


def generate_rule():
    cache = pickle_tool.check_pickle()
    pattern = {'msg': '"Trojan.Gen"'}
    connection = utils.follow_tcp_stream('./PCAPLog/3a.pcap')
    rule_set = []
    sid = 1000000
    for conn, frame in connection.iteritems():
        dst_port = conn[3]
        # print utils.connection_key_2_str(conn)
        for seq, content in frame.iteritems():
            if content and get_search(content):
                s = get_search(content)
                # print s.group(0), s.group(1)
            if content and host_search(content):
                searchobj = host_search(content)
                resource = searchobj.group(1)[0:-1]
                # print resource
                c = searchobj.group(0)[0:-1]
                positives = get_positive(resource, cache)
                if positives > 0:
                    sid += 1
                    pattern['content'] = ['"{host}"'.format(host=c), 'nocase']
                    pattern['sid'] = sid
                    pattern['dst_port'] = dst_port
                    rule = SnortRule()
                    rule.set_malicious_pattern(**pattern)
                    if not iscontent(rule, rule_set):
                        rule_set.append(rule)
                    else:
                        sid -= 1
                elif positives == 0:
                    pass
                    # logger.info("%s NOT a malicious site" % resource)
                else:
                    logging.info("Scan Faild. wait 60 secconds")
                    logging.info("%s unrecording" % resource)
                    time.sleep(60)

    pickle_tool.update_pickle(cache)
    for i in rule_set:
        print i


def main():
    logging.basicConfig(level=logging.WARNING)
    # generate_rule()
    for pcap in list_pcap():
        gen_rule(pcap)

    for i in RULE:
        print i
    # list_pcap()

if __name__ == "__main__":
    main()
