import re
import os
import logging
from malware import utils
from malware.snort import SnortRule
from malware import pickle_tool
from malware import virustotal

logger = logging.getLogger(__name__)


def list_pcap(path):
    for dirPath, dirNames, fileNames in os.walk(path):
        for f in fileNames:
            if f.split('.')[1] == 'pcap':
                yield os.path.join(dirPath, f)


def get_positive(resource, cache={}):
    if resource in cache.keys():
        logger.debug("%s in cache" % resource)
        positives = cache.get(resource)
        # logger.info('%s in cache positives: %s' % (resource, positives))
        return positives
    else:
        logger.info("Search on VirusTotal")
        positives = virustotal.url_report(resource)
        if positives >= 0:
            cache[resource] = positives
        return positives


def iterpayload(path):
    connection = utils.follow_tcp_stream(path)
    for conn, frame in connection.iteritems():
        for seq, content in frame.iteritems():
            if content:
                # Generate the content and 5-tuple
                yield content, conn
            else:
                # Some packets have no payload
                pass


def gen_rule(pcap_path, cache):
    # rule_set = list()
    # sid = 1000000
    for content, conn in iterpayload('%s' % (pcap_path)):
        # print content, utils.connection_key_2_str(conn)
        get_method = re.search('GET (.*) ', content)
        host = re.search('Host: (.*)', content)
        if host and get_method:
            # pos = get_positive(host.group(1).rstrip(), cache)
            # print host.group(1).rstrip()

            # if pos > 0:
            #     sid += 1
            #     rule = make_host_rule(host.group(0).rstrip(), conn[3])
            #     if not iscontent(rule, RULE):
            #        RULE.append(rule)
                # else:
                #     pass
                    # sid -= 1
            # else:
            #     pass
                # print "NOT generate"
                # NOT generate rule

            if get_method.group(1) == '/':
                url = host.group(1).rstrip()
            else:
                url = host.group(1).rstrip() + get_method.group(1)

            host_content = host.group(0).rstrip()
            uricontent = get_method.group(1)
            pos = get_positive(url, cache)
            if pos > 0:
                # print "BAD URL: %s" % uricontent
                # sid += 1
                if uricontent == '/':
                    uricontent = None
                rule = make_uri_rule(host_content, uricontent, conn[3])
                yield rule
                # if not isuricontent(rule, RULE):
                #    RULE.append(rule)
                # else:
                #    sid -= 1
            else:
                pass

        else:
            # print "no URL"
            pass
            # print repr(content)
    # for r in rule_set:
    #     print r
    pickle_tool.update_json(cache)
    # return rule_set


def make_host_rule(content, dst_port, sid=0):
    rule = SnortRule()
    pattern = dict()
    pattern['msg'] = '"Trojan.Gen"'
    pattern['content'] = ['"{host}"'.format(host=content), 'nocase']
    # pattern['sid'] = sid
    pattern['dst_port'] = dst_port
    rule.set_malicious_pattern(**pattern)
    return rule


def make_uri_rule(content, uricontent, dst_port, sid=0):
    rule = SnortRule()
    pattern = dict()
    pattern['msg'] = '"Trojan.Gen.uricontent"'
    pattern['content'] = ['"{host}"'.format(host=content), 'nocase']
    pattern['uricontent'] = ['"{uri}"'.format(uri=uricontent), 'nocase']
    # pattern['sid'] = sid
    pattern['dst_port'] = dst_port
    rule.set_malicious_pattern(**pattern)
    return rule


def main():
    logging.basicConfig(level=logging.DEBUG,
                        format='[%(levelname)s] %(message)s',)

    rule_instances = list()
    RULE = list()
    cache = pickle_tool.check_json()

    for pcap in list_pcap('./PCAPLog/'):
        for rule in gen_rule(pcap, cache):
            rule_instances.append(rule)

    for ruleobj in rule_instances:
        RULE.append(str(ruleobj))

    RULE = list(set(RULE))

    for r in RULE:
        print r


if __name__ == "__main__":
    main()
